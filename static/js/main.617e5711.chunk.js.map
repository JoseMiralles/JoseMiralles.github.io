{"version":3,"sources":["HeroSection.tsx","ProjectsComponents/ProjectsData.ts","slideshow/SlideShow.tsx","Modal/ModalHandler.tsx","state.ts","ProjectsComponents/TechnologiesList.tsx","ProjectsComponents/ProjectList.tsx","ProjectsComponents/ProjectSection.tsx","App.tsx","index.tsx"],"names":["HeroSection","id","className","projectLists","title","description","projects","name","images","YTVideos","highlights","text","url","links","technologies","projectDictionary","forEach","pl","p","YTVideoEmbed","width","height","src","frameBorder","allow","allowFullScreen","SlideShow","useState","media","setMedia","position","setPosition","useEffect","newMedia","v","i","push","type","img","content","map","m","thumbNails","length","onClick","e","newPos","target","getAttribute","ModalHandler","navigate","useNavigate","projectName","useParams","project","undefined","t","l","href","h","techFiltersState","atom","key","default","TechnologiesList","useRecoilState","filters","setFilters","mapped","trail","includes","tech","innerHTML","filter","concat","ProjectList","techSort","useRecoilValue","techHash","Set","score","add","techMatchRating","Array","from","sort","a","b","aIsSelected","idx","to","ProjectSection","selectedTab","setSelectedTab","selectedProjectList","find","App","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.617e5711.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport \"./HeroSection.scss\";\n\nconst HeroSection = () => {\n\n    return (\n        <div id=\"hero-section\" className=\"center column\">\n\n            <h1 id=\"hero-title\">Jose Miralles</h1>\n\n            <div id=\"hero-jobtitle\">Systems Engineer</div>\n            \n            <div id=\"hero-company\">Bank of America</div>\n\n        </div>\n    );\n};\n\nexport default HeroSection;\n","\nexport const technologiesArr = [\n    \"HTML\", \"CSS\", \"SCSS\", \"JavaScript\", \"TypeScript\",\n    \"Node\", \"Jasmine\", \"API\", \"REST\", \"Asynchronous\", \"CRUD\",\n    \"React\", \"React-Native\", \"Redux\", \"Custom-Redux-Middleware\", \"Recoil\",\n    \"JWT\", \"Refresh Tokens\", \"Identity Provider\",\n    \"C#\", \"ASP\", \"Xamarin\", \"SignalR\", \"Enitity-Framework\", \"DotNet\",\n    \"ThreeJS\", \"Blender\", \"Webpack\",\n    \"SQL\", \"Mongo\", \"Mongoose\", \"Postgress\",\n    \"Ruby\", \"Rails\",\n    \"Mobile-Development\",\n    \"PHP\", \"Laravel\",\n    \"iOS\", \"Android\", \"VR\", \"Unit-Tests\"\n] as const;\n\n/**\n * Convert the technologiesArr above into a Union type.\n * EX: \"HTML\" | \"CSS\" | \"SCSS\" ...\n */\nexport type technologyTypes = typeof technologiesArr[number];\n\nexport interface IProject {\n    name: string;\n    description: string;\n    links: { title: string; url:string; } [];\n    highlights?: { text: string; url?: string;} [];\n    YTVideos?: string[];\n    images?: string[];\n    /**\n     * Used when technologies are passed in trough the url.\n     * It is used to sort projects by relevance of technologies.\n     */\n    techMatchRating?: number;\n    technologies: technologyTypes[];\n}\n\nexport interface IProjectList {\n    title: string;\n    description: string;\n    projects: IProject[];\n}\n\nexport const projectLists: IProjectList[] = [\n    {\n        title: \"Completed Projects\",\n        description: \"Some of my finished projects.\",\n        projects: [\n            {\n                name: \"CHAOS VR\",\n                description: (\n                    \"A web VR game built using Three.js and JavaScript. Optimized to run on Quest. VR headset required.\"\n                ),\n                images: [\"/img/chaos_vr.gif\"],\n                YTVideos: [\n                    \"https://www.youtube.com/embed/sgtoEU0PioA\",\n                    \"https://www.youtube.com/embed/KXy4ktaRr2o\"\n                ],\n                highlights: [\n                    {\n                        text: \"Created asset pools to recycle actors such as enemies, projectiles, and sounds.\",\n                        url: \"https://github.com/JoseMiralles/Chaos-VR/blob/9cda4fc5c56e392c9530317b46c4c70ed2c36442/src/scripts/enemy_spawner.js#L87\"\n                    },\n                    {\n                        text: \"Simulated physics manually inside tick() functions without a physics engine.\",\n                        url: \"https://github.com/JoseMiralles/Chaos-VR/blob/main/src/scripts/enemy_robot.js#L171\"\n                    },\n                    {\n                        text: \"Modeled all assets using Blender.\",\n                        url: \"https://github.com/JoseMiralles/Chaos-VR#using-a-single-gltf-file-for-all-3d-assets\"\n                    },\n                ],\n                links: [\n                    {\n                        title: \"Game\",\n                        url: \"https://josem.dev/Chaos-VR/\",\n                    },\n                    {\n                        title: \"Gameplay Videos\",\n                        url: \"https://www.youtube.com/playlist?list=PLghWRYpL5zyWu1HgNfVpOLBVNuiOC8svX\"\n                    },\n                    {\n                        title: \"GitHub\",\n                        url: \"https://github.com/JoseMiralles/Chaos-VR\"\n                    }\n                ],\n                technologies: [\n                    \"JavaScript\", \"ThreeJS\", \"Blender\", \"Webpack\", \"VR\"\n                ]\n            },\n            {\n                name: \"TS Test Generator\",\n                description: (\n                    \"A CLI test generator wich creates a set of typescript problems and Jasmine.js tests from a popular curated list of 75 leetcode problems to facilitate learning algorithms and data structures.\"\n                ),\n                images: [\"/img/ts_test_gen.jpg\"],\n                highlights: [\n                    {\n                        text: \"Built generator with TypeScript and Node.\",\n                        url: \"https://github.com/JoseMiralles/CuratedListTestGenerator/blob/main/generator.ts#L25\"\n                    },\n                    {\n                        text: \"Wrote all Jasmine tests using TypeScript.\",\n                        url: \"https://github.com/JoseMiralles/CuratedListTestGenerator/blob/main/data/spec/linkedList.spec.ts\"\n                    }\n                ],\n                links: [\n                    {\n                        title: \"GitHub\",\n                        url: \"https://github.com/JoseMiralles/CuratedListTestGenerator#curatedlisttestgenerator\",\n                    },\n                ],\n                technologies: [\n                    \"TypeScript\", \"Node\", \"Jasmine\", \"Unit-Tests\"\n                ]\n            },\n            {\n                name: \"Run Chart\",\n                description: (\n                    \"A React app that allows users to plan, share, and search for running routes.\"\n                ),\n                images: [\n                    \"/img/runchart.png\",\n                    \"/img/runchart1.png\",\n                    \"/img/runchart2.png\",\n                    \"/img/runchart3.png\",\n                ],\n                highlights: [\n                    {\n                        text: \"Built CRUD API using Rails and PostgreSQL including an index route to filter routes by keywords and map view bounds.\",\n                        url: \"https://github.com/JoseMiralles/RunChart/blob/main/app/controllers/api/routes_controller.rb\"\n                    },\n                    {\n                        text: \"Used the Google Maps API to implement a React component which allows users to create or edit running routes, as well as components to view routes and to find routes using an interactive map.\",\n                        url: \"https://github.com/JoseMiralles/RunChart/blob/main/frontend/components/route_builder/route_builder.jsx\"\n                    },\n                    {\n                        text: \"Utilized the Google Maps Geometry library to encode and decode running routes to and from strings to facilitate storage in a SQL database.\",\n                        url: \"https://github.com/JoseMiralles/RunChart/blob/main/frontend/components/route_builder/route_builder.jsx\"\n                    }\n                ],\n                links: [\n                    {\n                        title: \"Live Site\",\n                        url: \"https://run-chart.herokuapp.com/#/\",\n                    },\n                    {\n                        title: \"GitHub\",\n                        url: \"https://github.com/JoseMiralles/RunChart/\",\n                    },\n                ],\n                technologies: [\n                    \"React\", \"Redux\", \"JavaScript\", \"SQL\", \"API\", \"REST\", \"Ruby\", \"Rails\", \"SCSS\", \"Asynchronous\", \"CSS\", \"CRUD\"\n                ]\n            },\n            {\n                name: \"Minesweeper App\",\n                description: \"A Minesweeper mobile app made with React Native and Typescript.\",\n                links: [\n                    {\n                        title: \"Try with Expo\",\n                        url: \"https://expo.dev/@josemiralles/minesweeper\"\n                    },\n                    {\n                        title: \"GitHub\",\n                        url: \"https://github.com/JoseMiralles/Minesweeper-React-Native\"\n                    }\n                ],\n                technologies: [\"React-Native\", \"TypeScript\", \"Recoil\", \"React\", \"iOS\", \"Android\", \"Mobile-Development\", \"JavaScript\"],\n                images: [\n                    \"/img/mine1.png\",\n                    \"/img/mine2.png\"\n                ]\n            },\n            {\n                name: \"Eurolamy Website\",\n                description: \"Created site using React and three.js\",\n                images: [\n                    \"/img/eurolamy/logo.png\",\n                    \"/img/eurolamy/screenshot.png\",\n                    \"/img/eurolamy/blender.png\"\n                ],\n                highlights: [\n                    {\n                        text: \"Used three.js to render and animate background 3d wireframe scene.\",\n                        url: \"https://github.com/JoseMiralles/Eurolamy/blob/master/src/components/Top3DScene.tsx\"\n                    },\n                    {\n                        text: \"Used mouse and device orientation events to control the position of the 3d scene camera.\",\n                        url: \"https://github.com/JoseMiralles/Eurolamy/blob/master/src/components/Top3DScene.tsx#L82\"\n                    },\n                    {\n                        text: \"Use Blender to model 3d assets.\"\n                    }\n                ],\n                links: [\n                    {\n                        title: \"Live Site\",\n                        url: \"https://eurolamy.com/\"\n                    },\n                    {\n                        title: \"GitHub\",\n                        url: \"https://github.com/JoseMiralles/Eurolamy\"\n                    }\n                ],\n                technologies: [\n                    \"TypeScript\", \"ThreeJS\", \"React\", \"SCSS\", \"Blender\", \"CSS\", \"JavaScript\"\n                ]\n            },\n            {\n                name: \"Location Score\",\n                description: \"A Node.js app that merges different datasets into a single one, and also assings a score to each datapoint. The goal is to make it easier to find an optimal location to open a new office based on a few metrics.\",\n                technologies: [\"TypeScript\", \"Node\", \"JavaScript\"],\n                highlights: [\n                    {\n                        text: \"Implemented 4 methods to parse each file, to then return a dictionary like object were each key is a county code, and each value an object with a metric, and a coefficient score.\",\n                        url: \"https://github.com/JoseMiralles/LocationScore/blob/master/src/DataLoaders.ts#L18\"\n                    },\n                    {\n                        text: \"Implemented a method that merges all of the dictionaries into a single array which contains relevant metrics, as well as a newly generated aggregate scores for each location.\",\n                        url: \"https://github.com/JoseMiralles/LocationScore/blob/master/src/DataLoaders.ts#L216\"\n                    }\n                ],\n                links: [],\n                images: [\n                    \"/img/locationscore/graph.png\",\n                    \"/img/locationscore/output.png\",\n                ]\n            },\n            {\n                name: \"Gifaroo\",\n                description: (\n                    \"A mobile app that allowed users to fetch, edit, and export gifs from any website.\"\n                ),\n                images: [\n                    \"/img/gifaroo1.jpg\",\n                    \"/img/gifaroo.png\",\n                    \"/img/gifaroo2.jpg\",\n                    \"/img/gifaroo3.jpg\",\n                    \"/img/gifaroo4.jpg\",\n                    \"/img/gifaroo5.jpg\",\n                ],\n                highlights: [\n                    {\n                        text: \"Built with C#/.NET and Xamarin.Android.\",\n                    },\n                    {\n                        text: \"Created Java Bindings libraries to call existing Java libraries from C#.\",\n                    },\n                    {\n                        text: \"Implemented Google play in-app purchasing.\",\n                        url: \"https://github.com/JoseMiralles/GifarooApp/blob/master/Gifaroo.Android/Classes/PremiumInterface.cs\"\n                    },\n                    {\n                        text: \"Used FFMPEG to process gifs\",\n                        url: \"https://github.com/JoseMiralles/GifarooApp/blob/master/Gifaroo.Android/SaveActivity.cs\"\n                    }\n                ],\n                links: [\n                    {\n                        title: \"GitHub\",\n                        url: \"https://github.com/JoseMiralles/GifarooApp/\",\n                    },\n                ],\n                technologies: [\n                    \"Xamarin\", \"C#\", \"DotNet\", \"Mobile-Development\", \"Android\"\n                ]\n            },\n        ]\n    },\n    {\n        title: \"Other Projects\",\n        description: \"Projects that are small, unfinished, or unpublished. And were created for the purpose of learning.\",\n        projects: [\n            {\n                name: \"InTalk\",\n                description: (\n                    \"A Discord style app that I decided to build after reading 'ASP.NET Core 5 and React'\" +\n                    \" by Carl Rippon. It includes a custom identity provider built with ASP.net.\"\n                    ),\n                highlights: [\n                    {text: \"Frontend built using React, TypeScript, and Redux.\"},\n                    {text: \"Backend built using ASP.NET, PostgreSQL, SignalR, and Entity Framework.\"},\n                    {\n                        text: \"Custom identity provider built using ASP.net and C#.\",\n                        url: \"https://github.com/JoseMiralles/InTalk/blob/main/backend/Controllers/AuthManagmentController.cs\"\n                    },\n                    {\n                        text: \"Handled JWTs and Refresh Tokens in the front end by using Axios middleware.\",\n                        url: \"https://github.com/JoseMiralles/InTalk/blob/main/frontend/src/Util/SessionUtil.ts\"\n                    },\n                    {\n                        text: \"Implemented realtime chat rooms / servers using SignalR Hub in the back end.\",\n                        url: \"https://github.com/JoseMiralles/InTalk/blob/main/backend/Hub/InTalkHub.cs\"\n                    },\n                    {\n                        text: \"Handled front-end real time connectivity using custom Redux middleware.\",\n                        url: \"https://github.com/JoseMiralles/InTalk/blob/main/frontend/src/Middleware/SignalRMiddleware.ts\"\n                    },\n                    {\n                        text: \"Created API unit tests.\",\n                        url: \"https://github.com/JoseMiralles/InTalk/blob/main/api-tests/ServerApiTests.cs\"\n                    },\n                    {\n                        text: \"Used dependency injection to separate data access from controllers by using repositories.\",\n                        url: \"https://github.com/JoseMiralles/InTalk/blob/main/backend/Data/ServerRepository.cs\"\n                    }\n                ],\n                links: [\n                    {\n                        title: \"Github repo\",\n                        url: \"https://github.com/JoseMiralles/InTalk\"\n                    }\n                ],\n                technologies: [\n                    \"React\", \"Redux\", \"TypeScript\", \"ASP\", \"C#\",\n                    \"SQL\", \"Postgress\", \"Custom-Redux-Middleware\", \"SignalR\",\n                    \"JWT\", \"Refresh Tokens\", \"Identity Provider\", \"HTML\", \"CSS\",\n                    \"SCSS\", \"Asynchronous\", \"JavaScript\", \"Unit-Tests\"\n                ]\n            },\n            {\n                name: \"Splunk React Dashboard App\",\n                description: \"A React app that can run in a Splunk dashboard. Built using Typescript and Redux.\",\n                highlights: [\n                    {text: \"Modified Webpack to output a single bundle.js file as required by Splunk.\"},\n                    {\n                        text: \"Created asynchronous method wich requests an SPL search from Splunk\",\n                        url: \"https://github.com/JoseMiralles/Splunk-React-TypeScript-Demo/blob/main/appserver/static/client/src/util/searchUtil.ts#L24\"\n                    }\n                ],\n                YTVideos: [\"https://www.youtube.com/embed/gPja51_O0Z4\"],\n                links: [\n                    {\n                        title: \"Video Demo\",\n                        url: \"https://www.youtube.com/watch?v=gPja51_O0Z4&t=12s\"\n                    }\n                ],\n                technologies: [\"React\", \"TypeScript\", \"Redux\", \"Webpack\", \"SCSS\", \"Asynchronous\"]\n            },\n            {\n                name: \"Instavel\",\n                description: \"Instagram clone built using Laravel, PHP, and SQL.\",\n                links: [\n                    {\n                        title: \"GitHub\",\n                        url: \"https://github.com/JoseMiralles/Instavel\"\n                    }\n                ],\n                images: [\"/img/instavel/logo.png\"],\n                technologies: [\"PHP\", \"Laravel\", \"API\", \"REST\", \"CSS\", \"JavaScript\"],\n                highlights: [\n                    {text: \"Followed the MVC design pattern.\"},\n                    {text: \"Followed RESTful routing to perform CRUD operations on an SQL database.\"},\n                    {text: \"Used Bootstrap and flexbox for styling\"}\n                ]\n            }\n        ]\n    }\n];\n\nexport const projectDictionary: {[indexer: string]: IProject} = {};\n\nprojectLists.forEach(pl => {\n    pl.projects.forEach(p => {\n        projectDictionary[p.name] = p;\n    });\n});\n","\nimport React, { ReactNode, useEffect, useState } from \"react\";\nimport \"./SlideShow.scss\";\n\ninterface IParams {\n    YTVideos?: string[];\n    images?: string[];\n}\n\ntype IMediaList = {url: string; type: (\"YTVIDEO\"|\"IMAGE\")}[];\n\nconst SlideShow = (\n    {YTVideos, images}: IParams\n) => {\n\n    const [media, setMedia] = useState<IMediaList>();\n    const [position, setPosition] = useState(0);\n\n    useEffect(() => {\n        const newMedia: IMediaList = [];\n    \n        if (YTVideos) YTVideos.forEach((v, i) => {\n            newMedia.push({type: \"YTVIDEO\", url: v});\n        });\n    \n        if (images) images.forEach((img, i) => {\n            newMedia.push({type: \"IMAGE\", url: img});\n        });\n\n        setMedia(newMedia);\n    },[]);\n\n    const content = media ? (\n        media.map((m, i) => {\n            switch (m.type) {\n                case \"YTVIDEO\":\n                    return <YTVideoEmbed key={i} url={m.url}/>\n                    break;\n            \n                case \"IMAGE\":\n                    return <img key={i} src={m.url}/>\n                    break;\n            }\n        })\n    ) : [<span></span>];\n\n    const thumbNails = media ? (\n        media.map((m, i) => {\n            let src = \"\";\n            switch (m.type) {\n                case \"YTVIDEO\":\n                    src = \"/img/yticon.png\";\n                    break;\n                case \"IMAGE\":\n                    src = m.url;\n                    break;\n            }\n            return <img className=\"thumbnail\" src={src} key={i} data-index={i}/>\n        })\n    ) : [<span></span>];\n\n    const onThumbnailClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const newPos = (e.target as any).getAttribute(\"data-index\");\n        if (newPos) setPosition(newPos);\n    };\n\n    return (\n        <div className=\"slideshow\">\n            {content[position]}\n            {(thumbNails.length > 1) &&\n                <div onClick={onThumbnailClick} className=\"thumbnails\">\n                    {thumbNails}\n                </div>\n            }\n        </div>\n    );\n};\n\nconst YTVideoEmbed = (\n    {url}: {url:string}\n) => (\n    <iframe\n        width=\"560\"\n        height=\"315\"\n        src={url}\n        title=\"YouTube video player\"\n        frameBorder={0}\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        allowFullScreen\n        ></iframe>\n);\n\nexport default SlideShow;\n","\nimport React from \"react\";\n\nimport \"./ModalHandler.scss\";\nimport { IProject, projectDictionary } from \"../ProjectsComponents/ProjectsData\";\nimport SlideShow from \"../slideshow/SlideShow\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nconst ModalHandler = () => {\n\n    const navigate = useNavigate();\n\n    const projectName = useParams<{projectName: string}>().projectName;\n    if (!projectName) return (<span></span>);\n    const project: IProject | undefined = projectDictionary[projectName];\n    if (!project) return (<span></span>);\n\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const attribute = (e.target as any).getAttribute(\"click-action\");\n        if (attribute === \"close-modal\") navigate(\"/\");\n    };\n\n    return (\n        <div className=\"modal-wrapper\">\n            { (project !== undefined) ?\n\n                <div\n                    onClick={handleClick}\n                    className=\"modal-background\"\n                    click-action=\"close-modal\"\n                    >\n                    <div className=\"modal\">\n\n                        {/* X button */}\n                        <div\n                            className=\"close-modal-button\"\n                            click-action=\"close-modal\"\n                            >X</div>\n\n                        {/* Title */}\n                        <div id=\"modal-title\">\n                            <h1>{project.name}</h1>\n                        </div>\n\n                        {/* // Slideshow */}\n                        <SlideShow YTVideos={project.YTVideos} images={project.images}/>\n\n                        {/* Tech tags */}\n                        <div className=\"tech-list\">\n                            {project.technologies.map((t, i) => (\n                                <div\n                                    className=\"tech-item\"\n                                    key={i}\n                                >{t}</div>\n                            ))}\n                        </div>\n\n                        {/* Description */}\n                        <p className=\"project-description\">{project.description}</p>\n\n                        {/* Links */}\n                        <div className=\"project-links\">\n                            {project.links.map((l, i) => (\n                                <a key={i} href={l.url} target=\"_blank\">{l.title}</a>\n                            ))}\n                        </div>\n\n                        {/* Highlights / bulletpoints */}\n                        {\n                            (project.highlights) &&\n                            <ul className=\"highlights\">\n                                {project.highlights.map((h, i) => (\n                                    <li key={i}>{\n                                        (h.url) ?\n                                        <a target=\"_blank\" href={h.url}>{h.text}</a> :\n                                        h.text\n                                    }</li>\n                                ))}\n                            </ul>\n                        }\n\n                    </div>\n                </div>\n\n            : \"\"}\n        </div>\n    );\n};\n\nexport default ModalHandler;\n","import { atom } from \"recoil\";\nimport { technologyTypes } from \"./ProjectsComponents/ProjectsData\";\n\nexport const modalState = atom({\n    key: \"modalState\",\n    default: \"\"\n});\n\nexport const techFiltersState = atom<technologyTypes[]>({\n    key: \"techFiltersState\",\n    default: []\n});\n","\nimport React from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { techFiltersState } from \"../state\";\nimport { technologyTypes } from \"./ProjectsData\";\nimport \"./TechnologiesList.scss\"\n\nconst TechnologiesList = (\n    {technologies}: {technologies: technologyTypes[]}\n) => {\n    \n    const [filters, setFilters] = useRecoilState(techFiltersState);\n\n    const onClick = (e: React.MouseEvent) => {\n        const tech = (e.target as any).innerHTML;\n        if (filters.includes(tech))\n            setFilters(filters.filter(t => t !== tech));\n        else\n            setFilters(filters.concat([tech]));\n    };\n\n    const mapped = technologies.map((t, i) => {\n        const trail = filters.includes(t) ? \"selected\" : \"\";\n        return (\n            <div className={\"tech \" + trail} key={i}>\n                {t}\n            </div>\n        );\n    });\n\n    return (\n        <div id=\"tech-list\" onClick={onClick}>\n            <div id=\"sort-text\">Sort:</div>\n            {mapped}\n        </div>\n    );\n};\n\nexport default TechnologiesList;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { modalState, techFiltersState } from \"../state\";\n\nimport { IProject, IProjectList, technologyTypes } from \"./ProjectsData\";\nimport TechnologiesList from \"./TechnologiesList\";\n\ninterface IParams {\n    pl: IProjectList\n}\n\nconst ProjectList = ({pl}: IParams) => {\n\n    const techSort = useRecoilValue(techFiltersState);\n\n    const techHash = new Set<technologyTypes>();\n\n    pl.projects.forEach(p => {\n        let score = 0;\n        p.technologies.forEach(t => {\n            techHash.add(t)\n            if (techSort.includes(t)) score ++;\n        });\n        p.techMatchRating = score;\n    });\n\n    const projectComparator = (\n        a: IProject, b: IProject\n    ): number => {\n        if (techSort.length < 1) return 0;\n        const scoreA = a.techMatchRating ?? 0;\n        const scoreB = b.techMatchRating ?? 0;\n        return scoreA >= scoreB ? -1 : 1;\n    };\n\n    const techComparator = (\n        a: technologyTypes, b: technologyTypes\n    ) => {\n        const aIsSelected = techSort.includes(a) ? 1 : -1;\n        const bIsSelected = techSort.includes(b) ? 1 : -1;\n        return bIsSelected - aIsSelected;\n    };\n\n    return (\n        <div className=\"project-section\">\n\n            {pl.description && (\n                <div className={\"p-list-description-wrapper\"}>\n                    <div className=\"p-list-description\">{pl.description}</div>\n                </div>\n            )}\n\n            <TechnologiesList technologies={Array.from(techHash).sort(techComparator)}/>\n\n            <div\n                // onClick={onClick}\n                className=\"project-list\">\n\n                {pl.projects.sort(projectComparator).map((p, idx) => (\n                    <Link\n                        to={`project/${p.name}`}\n                        key={idx}\n                        data-index={p.name}\n                        className=\"project-item-card\">\n\n                        { // Project match rating\n                            (p.techMatchRating !== undefined && p.techMatchRating > 0)\n                                && <span className=\"rating\">\n                                    {\"matches: \" + p.techMatchRating}\n                                </span>\n                        }\n                        \n                        {/* Project Image */}\n                        {(p.images && p.images[0]) && (\n                            <img className=\"project-card-image\" src={p.images[0]}/>\n                        )}\n\n                        <div className=\"project-card-info\">\n                            <div className=\"project-top-bar\">\n                                <span className=\"project-name\">{p.name}</span>\n                                {p.technologies.map((t, i) => (\n                                    <span key={i} className=\"tech-pill\">{t}</span>\n                                    ))}\n                            </div>\n                            <div className=\"project-description\">{p.description}</div>\n                        </div>\n\n                        <div\n                            data-index={p.name}\n                            className=\"foreground-gradient\"\n                        ></div>\n                        \n                    </Link>\n                ))}\n\n            </div>\n\n        </div>\n    );\n};\n\nexport default ProjectList;\n","import React, { useState } from \"react\";\nimport ProjectList from \"./ProjectList\";\n\nimport \"./Projects.scss\";\nimport { projectLists } from \"./ProjectsData\";\n\nconst ProjectSection = () => {\n\n    const [selectedTab, setSelectedTab] = useState(projectLists[0].title);\n    const selectedProjectList = projectLists.find(l => (l.title === selectedTab));\n\n    const onClick = (name: string) => {\n        return () => {\n            setSelectedTab(name);\n        };\n    };\n\n    return(\n        <div id=\"projects-section\" className=\"center\">\n\n            <div className=\"tabs\">\n                {projectLists.map((p, i) => (\n                    <div\n                        key={i}\n                        onClick={onClick(p.title)}\n                        className={`tab ${(selectedTab === p.title) ? \"selected\" : \"\"}`}>\n                        {p.title}\n                    </div>\n                ))}\n            </div>\n\n            {selectedProjectList && (<ProjectList pl={selectedProjectList}/>)}\n\n        </div>\n    );\n};\n\nexport default ProjectSection;\n","import React from 'react';\nimport { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom';\nimport HeroSection from './HeroSection';\nimport ModalHandler from './Modal/ModalHandler';\nimport ProjectSection from './ProjectsComponents/ProjectSection';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Routes>\n        <Route path=\"project/:projectName\" element={<ModalHandler />} />\n      </Routes>\n\n      <HeroSection />\n      <ProjectSection />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nimport \"normalize.css\";\nimport \"./index.scss\";\nimport { RecoilRoot } from 'recoil';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </RecoilRoot>\n  </React.StrictMode>\n);"],"sourceRoot":""}